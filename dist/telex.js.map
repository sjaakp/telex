{"version":3,"file":"telex.js","sources":["../src/index.js"],"sourcesContent":["/* main js-file. Build with rollup -c */\r\n/*jshint esversion: 6,  strict: false*/\r\n\r\nfunction Widget(id, options, msgs) {\r\n    Object.setPrototypeOf(this, {\r\n\r\n        defaults: {\r\n            /**\r\n             * Speed in pixels per second, Integer or Float\r\n             */\r\n            speed: 200,\r\n\r\n            /**\r\n             *  'normal' (to left) or  'reverse' (to right) - direction of movement\r\n             */\r\n            direction: 'normal',\r\n\r\n            /** string, timing-function used for the animation; 'ease-in-out' may be another useful value\r\n             * @see https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function\r\n             */\r\n            timing: 'linear',\r\n\r\n            /**\r\n             * boolean, pause ticker on hover\r\n             */\r\n            pauseOnHover: false,\r\n\r\n            /**\r\n             * function(tlx), callback after each refresh cycle. Opportunity to reload Telex with new messages.\r\n             * tlx points to the Telex instance.\r\n             */\r\n            onCycle: function(tlx)  {\r\n//                console.log(new Date(), tlx);\r\n            }\r\n\r\n            /**\r\n             *  array of messages.\r\n             *  A message is a plain object having the properties:\r\n             *  - content   The content of the message. Can be text, but also a piece of HTML (like a link).\r\n             *  - id        (Optional). Id of the message, starting with a word character.\r\n             *                  It is only used in the `remove` method. It is not used as a DOM-id.\r\n             *  - class     (Optional). The CSS-class of the message. May be used for styling purposes.\r\n             */\r\n        //    messages: []\r\n\r\n        },\r\n\r\n        animStart: function(msg) {\r\n            if (msg)    {\r\n                let msgWidth = this._elementWidth(msg),\r\n                    duration = 1000 * msgWidth / this.speed;\r\n\r\n                Object.assign(msg.style, {\r\n                    marginLeft: `-${msgWidth}px`,\r\n                    animationName: 'telex',\r\n                    animationDirection: this.direction,\r\n                    animationDuration: `${duration}ms`,\r\n                    animationTimingFunction: this.timing,\r\n                });\r\n            }\r\n        },\r\n\r\n        animStop: function(msg) {\r\n            if (msg)    {\r\n                Object.assign(msg.style, {\r\n                    marginLeft: null,\r\n                    animationName: 'none',\r\n                });\r\n            }\r\n        },\r\n\r\n        discardMsg: function(msg)   {\r\n            if (msg) {\r\n                msg.classList.add('telex-discard');\r\n            }\r\n        },\r\n\r\n        populate: function()    {\r\n            let prevMsgCnt = this.element.childNodes.length;\r\n\r\n            this.element.childNodes.forEach(v => { this.discardMsg(v); });\r\n\r\n            let telexWidth = this._elementWidth(this.element),\r\n                accu = { total: 0, max: 0 };\r\n\r\n            do {    // keep creating divs from msg's...\r\n                accu = this._messages.reduce((ac, cur, idx) => {\r\n                    if (typeof cur === 'string') { cur = { content: cur }; }\r\n                    let div = document.createElement('div');\r\n                    div.innerHTML = cur.content;\r\n                    if (cur.class) { div.classList.add(cur.class); }\r\n                    if (idx === 0) { div.classList.add('telex-head'); }\r\n                    this.element.appendChild(div);\r\n                    let w = this._elementWidth(div);\r\n                    return {\r\n                        total: ac.total + w,\r\n                        max: w > ac.max ? w : ac.max\r\n                    };\r\n                }, accu);\r\n\r\n            } while (accu.total > 0 && accu.total < (telexWidth + accu.max));    // ... until total width is big enough\r\n\r\n            this.onCycle(this);\r\n\r\n            if (! prevMsgCnt) {\r\n                this.animStart(this.element.firstChild);\r\n            }  // If this is the first child, start animation\r\n        },\r\n\r\n        refresh: function() {\r\n            if (! this.element.childNodes.length)   {\r\n                this.populate();\r\n            } else  {\r\n                this._pending = true;\r\n            }\r\n        },\r\n\r\n        _setAnimationState: function(state) {\r\n            let firstChild = this.element.firstChild;\r\n            if (firstChild) { firstChild.style.animationPlayState = state; }\r\n        },\r\n\r\n        _elementWidth(el)   {\r\n            return el.getBoundingClientRect().width;    // returns fractional value (el.offsetWidth gives integer value)\r\n        },\r\n\r\n        _removeIfDiscarded: function(msg)   {\r\n            if (msg && msg.classList.contains('telex-discard'))   {\r\n                this.element.removeChild(msg);\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        set messages(msg)   {\r\n            this._messages = msg;\r\n            this.refresh();\r\n        },\r\n\r\n        get messages()  {\r\n            return this._messages;\r\n        },\r\n\r\n        add: function(message) {\r\n            this._messages.unshift(message);\r\n            this.refresh();\r\n        },\r\n\r\n        remove: function(id) {\r\n            let i = this._messages.findIndex(function (e) {\r\n                return e.id === id;\r\n            });\r\n            if (i >= 0) { this._messages.splice(i, 1); }\r\n            this.refresh();\r\n        },\r\n\r\n        update: function(id, msg) {\r\n            let i = this._messages.findIndex(function (e) {\r\n                return e.id === id;\r\n            });\r\n            if (i >= 0) {\r\n                this._messages.splice(i, 1, msg);\r\n            }\r\n            this.refresh();\r\n        },\r\n\r\n        pause: function()   {\r\n            this._paused = true;\r\n            this._setAnimationState('paused');\r\n        },\r\n\r\n        resume: function()   {\r\n            this._paused = false;\r\n            this._setAnimationState('running');\r\n        },\r\n    });\r\n\r\n    this.element = document.getElementById(id);\r\n\r\n    this.element.classList.add('telex');\r\n\r\n    this.element.addEventListener('animationend', e => {    // bubbles up from firstchild\r\n        this.animStop(e.target);\r\n\r\n        if (this.direction === e.target.style.animationDirection) {     // skip if direction changed\r\n            if (this.direction === 'normal')    {   // rotate child nodes right\r\n                if (! this._removeIfDiscarded(e.target))    {\r\n                    this.element.appendChild(e.target);\r\n                }\r\n            }\r\n            else {      // direction 'reverse', rotate child nodes left\r\n                let c, nodes = this.element.childNodes;\r\n                do {\r\n                    c = nodes[nodes.length - 1];\r\n                  }\r\n                while (this._removeIfDiscarded(c));\r\n                this.element.insertBefore(c, this.element.firstChild);\r\n            }\r\n        }\r\n        this.animStart(this.element.firstChild);\r\n        if (this._pending && this.element.firstChild.classList.contains('telex-head'))  {\r\n            this.populate();\r\n            this._pending = false;\r\n        }\r\n    });\r\n\r\n    this.element.addEventListener('mouseenter', e => {\r\n        if (this.pauseOnHover) {\r\n            this._setAnimationState('paused');\r\n        }\r\n    });\r\n\r\n    this.element.addEventListener('mouseleave', e => {\r\n        if (this.pauseOnHover && ! this._paused) {\r\n            this._setAnimationState('running');\r\n        }\r\n    });\r\n\r\n    window.addEventListener('resize', e => {\r\n        this.refresh();\r\n    });\r\n\r\n    Object.assign(this, this.defaults, options);\r\n}\r\n\r\nfunction widget(id, options, msgs) {\r\n    return new this.Widget(id, options, msgs);\r\n}\r\n\r\nimport './index.scss';\r\nexport {Widget, widget};\r\n\r\n// const Telex = { Widget, widget };"],"names":["id","options","msgs","Object","setPrototypeOf","this","defaults","speed","direction","timing","pauseOnHover","onCycle","tlx","animStart","msg","let","msgWidth","_elementWidth","duration","assign","style","marginLeft","animationName","animationDirection","animationDuration","animationTimingFunction","animStop","discardMsg","classList","add","populate","prevMsgCnt","element","childNodes","length","forEach","v","telexWidth","accu","total","max","_messages","reduce","ac","cur","idx","content","div","document","createElement","innerHTML","class","appendChild","w","firstChild","refresh","_pending","_setAnimationState","state","animationPlayState","el","getBoundingClientRect","width","_removeIfDiscarded","contains","removeChild","messages","message","unshift","remove","i","findIndex","e","splice","update","pause","_paused","resume","getElementById","addEventListener","target","c","nodes","insertBefore","window","Widget"],"mappings":"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"}